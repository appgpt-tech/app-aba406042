//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { coursesEntity } from './db/courses.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [SettingsEntity, coursesEntity];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      courses: [
        {
          courseTitle: 'courseTitle 1',
          courseDescription: 'courseDescription 1',
          instructorName: 'instructorName 1',
          startDate: '2024-07-29T05:39:41.210Z',
          collectionOfProblemsOrExercises: 'collectionOfProblemsOrExercises 1',
          answerOrSolutionToTheProblemSets:
            'answerOrSolutionToTheProblemSets 1',
          id: 97,
        },
        {
          courseTitle: 'courseTitle 2',
          courseDescription: 'courseDescription 2',
          instructorName: 'instructorName 2',
          startDate: '2023-07-14T11:20:42.459Z',
          collectionOfProblemsOrExercises: 'collectionOfProblemsOrExercises 2',
          answerOrSolutionToTheProblemSets:
            'answerOrSolutionToTheProblemSets 2',
          id: 27,
        },
        {
          courseTitle: 'courseTitle 3',
          courseDescription: 'courseDescription 3',
          instructorName: 'instructorName 3',
          startDate: '2024-07-25T19:36:19.553Z',
          collectionOfProblemsOrExercises: 'collectionOfProblemsOrExercises 3',
          answerOrSolutionToTheProblemSets:
            'answerOrSolutionToTheProblemSets 3',
          id: 57,
        },
        {
          courseTitle: 'courseTitle 4',
          courseDescription: 'courseDescription 4',
          instructorName: 'instructorName 4',
          startDate: '2024-11-05T18:18:53.528Z',
          collectionOfProblemsOrExercises: 'collectionOfProblemsOrExercises 4',
          answerOrSolutionToTheProblemSets:
            'answerOrSolutionToTheProblemSets 4',
          id: 66,
        },
        {
          courseTitle: 'courseTitle 5',
          courseDescription: 'courseDescription 5',
          instructorName: 'instructorName 5',
          startDate: '2024-08-04T08:39:39.321Z',
          collectionOfProblemsOrExercises: 'collectionOfProblemsOrExercises 5',
          answerOrSolutionToTheProblemSets:
            'answerOrSolutionToTheProblemSets 5',
          id: 25,
        },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('coursesEntity', data.courses);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
